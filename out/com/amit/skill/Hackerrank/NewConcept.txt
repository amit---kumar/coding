1. BigInteger

            BigInteger f2 = new BigInteger("0");
            f2=f2.add(BigInteger.valueOf(a[0]));
            if(f.subtract( BigInteger.valueOf(a[i]).add(f2)).equals(f2))
                                return "YES";

2. Coin Change ways recursive
            return count( S, m - 1, n, true ) +
                    count( S, m, n-S[m-1], false );

3. Coin Change Dynamic

                0	1	2	3	4
            1	1	1	1	1	1
            2	1	1	2	2	3
            3	1	1	2	3	4

            for (int i = 0; i <c.length ; i++) {
                for (int j = 1; j <=(int)n ; j++) {
                    if(j>=c[i] && i>0){
                        dp[i][j] = dp[i-1][j] +dp[i][j-(int)c[i]];
                    }else if(j>=c[i]){
                        dp[i][j]=dp[i][j-(int)c[i]];
                    }else{
                        if(i>0){
                            dp[i][j]=dp[i-1][j];
                        }
                    }
                }
            }

4. Minimum coins required

